{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterName": {
      "type": "string",
      "metadata": {
        "description": "Name of your cluster - Between 3 and 23 characters. Letters and numbers only. Also used as a prefix for many resources."
      }
    },
    "adminUserName": {
      "type": "string",
      "metadata": {
        "description": "Virtual Machine administrative user name"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Remote desktop user password. Must be a strong password"
      }
    },
    "existingVNetResourceGroupName": {
      "defaultValue": "",
      "type": "String"
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Existing VNet Name to deploy Service Fabric cluster into."
      }
    },
    "frontEndSubnetName": {
      "type": "string",
      "metadata": {
        "description": "Existing front end subnet name to deploy Service Fabric cluster into."
      }
    },
    "backEndSubnetName": {
      "type": "string",
      "metadata": {
        "description": "Existing back end subnet name to deploy Service Fabric cluster into."
      }
    },
    "managementSubnetName": {
      "type": "string",
      "metadata": {
        "description": "Existing management subnet name to deploy Service Fabric cluster into."
      }
    },
    "frontEndLoadBalancerIPAddress": {
      "type": "string",
      "metadata": {
        "description": "Private IP address for frontend load balancer"
      }
    },
    "backendLoadBalancerIPAddress": {
      "type": "string",
      "metadata": {
        "description": "Private IP address for backend load balancer"
      }
    },
    "mgmntLoadBalancerIPAddress": {
      "type": "string",
      "metadata": {
        "description": "IP address of management load balancer"
      }
    },
    "storageAccountType": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Premium_LRS",
        "Premium_GRS"
      ],
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Replication option for the VM image storage account"
      }
    },
    "vmLogStorageAccountType": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS"
      ],
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Replication option for the support log storage account"
      }
    },
    "applicationDiagnosticsStorageAccountType": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS"
      ],
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Replication option for applicationDiagnosticsStorageAccountType support log storage account"
      }
    },
    "vmssDurabilityLevel": {
      "type": "string",
      "allowedValues": [
        "Bronze",
        "Silver",
        "Gold",
        "Platinum"
      ],
      "defaultValue": "Bronze",
      "metadata": {
        "description": "Durability level of the VM Scale Sets for all nodes"
      }
    },
    "frontEndVMSize": {
      "type": "string",
      "defaultValue": "Standard_D2",
      "metadata": {
        "description": "Size/Sku used for the Front End node type instances"
      }
    },
    "frontEndVMInstanceCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of Front End node type instances"
      }
    },
    "backEndVMSize": {
      "type": "string",
      "defaultValue": "Standard_D2",
      "metadata": {
        "description": "Size/Sku used for the Back End node type instances"
      }
    },
    "backEndVMInstanceCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of Back End node type instances"
      }
    },
    "managementVMSize": {
      "type": "string",
      "defaultValue": "Standard_D2",
      "metadata": {
        "description": "Size/Sku used for the Management node type instances"
      }
    },
    "managementVMInstanceCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of Management node type instances"
      }
    },
    "clusterDurabilityLevel": {
      "type": "string",
      "allowedValues": [
        "Bronze",
        "Silver",
        "Gold",
        "Platinum"
      ],
      "defaultValue": "Bronze",
      "metadata": {
        "description": "Durability level of all Service Fabric node types"
      }
    },
    "clusterReliabilityLevel": {
      "type": "string",
      "allowedValues": [
        "Bronze",
        "Silver",
        "Gold",
        "Platinum"
      ],
      "defaultValue": "Bronze",
      "metadata": {
        "description": "Reliability level for all Service Fabric node types"
      }
    },
    "certificateStoreValue": {
      "type": "string",
      "allowedValues": [
        "My"
      ],
      "defaultValue": "My",
      "metadata": {
        "description": "The store name where the cert will be deployed in the virtual machine"
      }
    },
    "certificateThumbprint": {
      "type": "string",
      "metadata": {
        "description": "Certificate Thumbprint"
      }
    },
    "sourceVaultValue": {
      "type": "string",
      "metadata": {
        "description": "Resource Id of the key vault, is should be in the format of /subscriptions/<Sub ID>/resourceGroups/<Resource group name>/providers/Microsoft.KeyVault/vaults/<vault name>"
      }
    },
    "certificateUrlValue": {
      "type": "string",
      "metadata": {
        "description": "Refers to the location URL in your key vault where the certificate was uploaded, it is should be in the format of https://<name of the vault>.vault.azure.net:443/secrets/<exact location>"
      }
    },
    "clusterProtectionLevel": {
      "type": "string",
      "allowedValues": [
        "None",
        "Sign",
        "EncryptAndSign"
      ],
      "defaultValue": "EncryptAndSign",
      "metadata": {
        "description": "Protection level.Three values are allowed - EncryptAndSign, Sign, None. It is best to keep the default of EncryptAndSign, unless you have a need not to"
      }
    },
    "svcFabReverseProxyPort": {
      "type": "int",
      "defaultValue": 443,
      "metadata": {
        "description": "Endpoint for Service Fabric Reverse proxy"
      }
    }
  },
  "variables": {
    "storageAccountSuffix": "sf",
    "storageAccountNameArray": [
      "[concat(uniqueString(concat(resourceGroup().id, variables('storageAccountSuffix'), '0')))]",
      "[concat(uniqueString(concat(resourceGroup().id, variables('storageAccountSuffix'), '1')))]",
      "[concat(uniqueString(concat(resourceGroup().id, variables('storageAccountSuffix'), '2')))]",
      "[concat(uniqueString(concat(resourceGroup().id, variables('storageAccountSuffix'), '3')))]",
      "[concat(uniqueString(concat(resourceGroup().id, variables('storageAccountSuffix'), '4')))]"
    ],
    "applicationDiagnosticsStorageAccountName": "[toLower(concat(uniqueString(resourceGroup().id), '3' ))]",
    "vmLogStorageAccountName": "[toLower( concat( uniqueString(resourceGroup().id),'2'))]",
    "vmStorageAccountContainerName": "vhds",
    "vmImageReference": {
      "publisher": "MicrosoftWindowsServer",
      "offer": "WindowsServer",
      "sku": "2012-R2-Datacenter",
      "version": "latest"
    },

    "virtualNetworkName": "[parameters('virtualNetworkName')]",
    "virtualNetworkID": "[resourceId(parameters('existingVNetResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",

    "frontEndSubnet": {
      "Name": "[parameters('frontEndSubnetName')]",
      "Ref": "[concat(variables('virtualNetworkID'),'/subnets/', parameters('frontEndSubnetName'))]"
    },
    "frontEndLoadBalancerID": "[resourceId('Microsoft.Network/loadBalancers','FrontEndLoadBalancer')]",
    "frontEndLoadBalancer": {
      "Name": "FrontEndLoadBalancer",
      "lbIPAddress": "[parameters('frontEndLoadBalancerIPAddress')]",
      "IPConfig": "[concat(variables('frontEndLoadBalancerID'),'/frontendIPConfigurations/LoadBalancerIPConfig')]",
      "PoolID": "[concat(variables('frontEndLoadBalancerID'),'/backendAddressPools/LoadBalancerBEAddressPool')]",
      "ProbeID": "[concat(variables('frontEndLoadBalancerID'),'/probes/FabricGatewayProbe')]",
      "HttpProbeID": "[concat(variables('frontEndLoadBalancerID'),'/probes/FabricHttpGatewayProbe')]"
    },
    "frontEndNodes": {
      "TypeName": "FrontEnd",
      "TypeSize": "[parameters('frontEndVMSize')]",
      "Capacity": "[parameters('frontEndVMInstanceCount')]",
      "nicName": "nicFrontEnd"
    },

    "backEndSubnet": {
      "Name": "[parameters('backEndSubnetName')]",
      "Ref": "[concat(variables('virtualNetworkID'),'/subnets/', parameters('backEndSubnetName'))]"
    },
    "backEndLoadBalancerID": "[resourceId('Microsoft.Network/loadBalancers','BackEndLoadBalancer')]",
    "backEndLoadBalancer": {
      "Name": "BackEndLoadBalancer",
      "lbIPAddress": "[parameters('backendLoadBalancerIPAddress')]",
      "IPConfig": "[concat(variables('backEndLoadBalancerID'),'/frontendIPConfigurations/LoadBalancerBackend-internal')]",
      "PoolID": "[concat(variables('backEndLoadBalancerID'),'/backendAddressPools/LoadBalancerBEAddressPool')]",
      "ProbeID": "[concat(variables('backEndLoadBalancerID'),'/probes/FabricGatewayProbe')]",
      "HttpProbeID": "[concat(variables('backEndLoadBalancerID'),'/probes/FabricHttpGatewayProbe')]"
    },
    "backEndNodes": {
      "TypeName": "BackEnd",
      "TypeSize": "[parameters('backEndVMSize')]",
      "Capacity": "[parameters('backEndVMInstanceCount')]",
      "nicName": "nicBackEnd"
    },

    "managementSubnet": {
      "Name": "[parameters('managementSubnetName')]",
      "Ref": "[concat(variables('virtualNetworkID'),'/subnets/', parameters('managementSubnetName'))]"
    },
    "managementLoadBalancerID": "[resourceId('Microsoft.Network/loadBalancers','MgmntLoadBalancer')]",
    "managementLoadBalancer": {
      "Name": "MgmntLoadBalancer",
      "lbIPAddress": "[parameters('mgmntLoadBalancerIPAddress')]",
      "IPConfig": "[concat(variables('managementLoadBalancerID'),'/frontendIPConfigurations/LoadBalancerIPConfig')]",
      "PoolID": "[concat(variables('managementLoadBalancerID'),'/backendAddressPools/LoadBalancerBEAddressPool')]",
      "ProbeID": "[concat(variables('managementLoadBalancerID'),'/probes/FabricGatewayProbe')]",
      "HttpProbeID": "[concat(variables('managementLoadBalancerID'),'/probes/FabricHttpGatewayProbe')]"
    },
    "managementNodes": {
      "TypeName": "Mgmnt",
      "TypeSize": "[parameters('managementVMSize')]",
      "Capacity": "[parameters('managementVMInstanceCount')]",
      "nicName": "nicMgmnt"
    },

    "serviceFabricPorts": {
      "tcpGatewayPort": "19000",
      "httpGatewayPort": "19080",
      "clusterPorts": "1025-1027",
      "applicationStartPort": "20000",
      "applicationEndPort": "30000",
      "ephemeralStartPort": "49152",
      "ephemeralEndPort": "65534"
    },

    "vmssOverProvision": "false"
  },
  "resources": [
    /* Storage accounts */
    {
      "comments": "Storage accounts for all VM Scale Sets",
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('storageAccountNameArray')[copyIndex()], variables('storageAccountSuffix'))]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "storageLoop",
        "count": "[length(variables('storageAccountNameArray'))]"
      },
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      },
      "tags": {
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "comments": "Log storage account for VM diagnostics and the jump box OS disk",
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('vmLogStorageAccountName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('vmLogStorageAccountType')]"
      },
      "tags": {
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "comments": "Diagnostics storage account for Service Fabric Clusters",
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('applicationDiagnosticsStorageAccountName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('vmLogStorageAccountType')]"
      },
      "tags": {
        "clusterName": "[parameters('clusterName')]"
      }
    },


    /* Load Balancers for frontend, backend and management nodes*/
    {
      "comments": "Front End Load Balancer",
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('frontEndLoadBalancer')['Name']]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerIPConfig",
            "properties": {
              "subnet": {
                "id": "[variables('frontEndSubnet')['Ref']]"
              },
              "comments": "bound to private IP within the front end subnet",
              "privateIPAddress": "[variables('frontEndLoadBalancer')['lbIPAddress']]",
              "privateIPAllocationMethod": "Static"
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBEAddressPool"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBSFReverseProxyRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('frontEndLoadBalancer')['PoolID']]"
              },
              "backendPort": "[parameters('svcFabReverseProxyPort')]",
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('frontEndLoadBalancer')['IPConfig']]"
              },
              "frontendPort": "[parameters('svcFabReverseProxyPort')]",
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[concat(variables('frontEndLoadBalancerID'),'/probes/SFReverseProxyProbe')]"
              },
              "protocol": "Tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "SFReverseProxyProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('svcFabReverseProxyPort')]",
              "protocol": "Tcp"
            }
          }
        ]
      },
      "tags": {
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "comments": "Backend Load Balancer (Private)",
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('backEndLoadBalancer')['Name']]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerBackend-internal",
            "properties": {
              "subnet": {
                "id": "[variables('backEndSubnet')['Ref']]"
              },
              "comments": "bound to private IP within the back end subnet",
              "privateIPAddress": "[variables('backEndLoadBalancer')['lbIPAddress']]",
              "privateIPAllocationMethod": "Static"
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBEAddressPool"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBSFReverseProxyRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('backEndLoadBalancer')['PoolID']]"
              },
              "backendPort": "[parameters('svcFabReverseProxyPort')]",
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('backEndLoadBalancer')['IPConfig']]"
              },
              "frontendPort": "[parameters('svcFabReverseProxyPort')]",
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[concat(variables('backEndLoadBalancerID'),'/probes/SFReverseProxyProbe')]"
              },
              "protocol": "Tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "SFReverseProxyProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('svcFabReverseProxyPort')]",
              "protocol": "Tcp"
            }
          }
        ]
      },
      "tags": {
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "comments": "Management Load Balancer",
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('managementLoadBalancer')['Name']]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerIPConfig",
            "properties": {
              "subnet": {
                "id": "[variables('managementSubnet')['Ref']]"
              },
              "comments": "bound to private IP within the management subnet",
              "privateIPAddress": "[variables('managementLoadBalancer')['lbIPAddress']]",
              "privateIPAllocationMethod": "Static"
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBEAddressPool"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('managementLoadBalancer')['PoolID']]"
              },
              "backendPort": "[variables('serviceFabricPorts')['tcpGatewayPort']]",
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[concat(variables('managementLoadBalancerID'),'/frontendIPConfigurations/LoadBalancerIPConfig')]"
              },
              "frontendPort": "[variables('serviceFabricPorts')['tcpGatewayPort']]",
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[concat(variables('managementLoadBalancerID'),'/probes/tcpRuleProbe')]"
              },
              "protocol": "Tcp"
            }
          },
          {
            "name": "LBHttpRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('managementLoadBalancer')['PoolID']]"
              },
              "backendPort": "[variables('serviceFabricPorts')['httpGatewayPort']]",
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[concat(variables('managementLoadBalancerID'),'/frontendIPConfigurations/LoadBalancerIPConfig')]"
              },
              "frontendPort": "[variables('serviceFabricPorts')['httpGatewayPort']]",
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[concat(variables('managementLoadBalancerID'),'/probes/httpRuleProbe')]"
              },
              "protocol": "Tcp"
            }
          },
          {
            "name": "LBSFReverseProxyRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('managementLoadBalancer')['PoolID']]"
              },
              "backendPort": "[parameters('svcFabReverseProxyPort')]",
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('managementLoadBalancer')['IPConfig']]"
              },
              "frontendPort": "[parameters('svcFabReverseProxyPort')]",
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[concat(variables('managementLoadBalancerID'),'/probes/SFReverseProxyProbe')]"
              },
              "protocol": "Tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "tcpRuleProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[variables('serviceFabricPorts')['tcpGatewayPort']]",
              "protocol": "Tcp"
            }
          },
          {
            "name": "httpRuleProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[variables('serviceFabricPorts')['httpGatewayPort']]",
              "protocol": "Tcp"
            }
          },
          {
            "name": "SFReverseProxyProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('svcFabReverseProxyPort')]",
              "protocol": "Tcp"
            }
          }
        ]
      },
      "tags": {
        "clusterName": "[parameters('clusterName')]"
      }
    },

    /* VM Scale sets for frontend, backend and management nodes */
    {
      "comments": "VM Scale Set for fronend nodes",
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[variables('frontEndNodes')['TypeName']]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameArray')[0], variables('storageAccountSuffix'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameArray')[1], variables('storageAccountSuffix'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameArray')[2], variables('storageAccountSuffix'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('vmLogStorageAccountName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('frontEndLoadBalancer')['Name'])]"
      ],
      "properties": {
        "overprovision": "[variables('vmssOverProvision')]",
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "extensionProfile": {
            "extensions": [
              {
                "name": "[concat('ServiceFabricNodeVmExt',variables('frontEndNodes')['TypeName'])]",
                "properties": {
                  "type": "ServiceFabricNode",
                  "autoUpgradeMinorVersion": false,
                  "protectedSettings": {
                    "StorageAccountKey1": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('vmLogStorageAccountName')),'2015-06-15').key1]",
                    "StorageAccountKey2": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('vmLogStorageAccountName')),'2015-06-15').key2]"
                  },
                  "publisher": "Microsoft.Azure.ServiceFabric",
                  "settings": {
                    "clusterEndpoint": "[reference(parameters('clusterName')).clusterEndpoint]",
                    "nodeTypeRef": "[variables('frontEndNodes')['TypeName']]",
                    "dataPath": "D:\\\\SvcFab",
                    "durabilityLevel": "[parameters('vmssDurabilityLevel')]",
                    "certificate": {
                      "thumbprint": "[parameters('certificateThumbprint')]",
                      "x509StoreName": "[parameters('certificateStoreValue')]"
                    }
                  },
                  "typeHandlerVersion": "1.0"
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('frontEndNodes')['nicName']]",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "[concat(variables('frontEndNodes')['nicName'],'-',0)]",
                      "properties": {
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[variables('frontEndLoadBalancer')['PoolID']]"
                          }
                        ],
                        "subnet": {
                          "id": "[variables('frontEndSubnet')['Ref']]"
                        }
                      }
                    }
                  ],
                  "primary": true
                }
              }
            ]
          },
          "osProfile": {
            "adminPassword": "[parameters('adminPassword')]",
            "adminUsername": "[parameters('adminUserName')]",
            "computerNamePrefix": "[variables('frontEndNodes')['TypeName']]",
            "secrets": [
              {
                "sourceVault": {
                  "id": "[parameters('sourceVaultValue')]"
                },
                "vaultCertificates": [
                  {
                    "certificateStore": "[parameters('certificateStoreValue')]",
                    "certificateUrl": "[parameters('certificateUrlValue')]"
                  }
                ]
              }
            ]
          },
          "storageProfile": {
            "imageReference": "[variables('vmImageReference')]",
            "osDisk": {
              "vhdContainers": [
                "[concat('https://', variables('storageAccountNameArray')[0], variables('storageAccountSuffix'), '.blob.core.windows.net/', variables('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('storageAccountNameArray')[1], variables('storageAccountSuffix'), '.blob.core.windows.net/', variables('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('storageAccountNameArray')[2], variables('storageAccountSuffix'), '.blob.core.windows.net/', variables('vmStorageAccountContainerName'))]"
              ],
              "name": "vmssosdisk",
              "caching": "ReadOnly",
              "createOption": "FromImage"
            }
          }
        }
      },
      "sku": {
        "name": "[variables('frontEndNodes')['TypeSize']]",
        "capacity": "[variables('frontEndNodes')['Capacity']]",
        "tier": "Standard"
      },
      "tags": {
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "comments": "VM Scale Set for backend nodes",
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[variables('backEndNodes')['TypeName']]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameArray')[0], variables('storageAccountSuffix'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameArray')[1], variables('storageAccountSuffix'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameArray')[2], variables('storageAccountSuffix'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('vmLogStorageAccountName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('backEndLoadBalancer')['Name'])]"
      ],
      "properties": {
        "overprovision": "[variables('vmssOverProvision')]",
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "extensionProfile": {
            "extensions": [
              {
                "name": "[concat('ServiceFabricNodeVmExt',variables('backEndNodes')['TypeName'])]",
                "properties": {
                  "type": "ServiceFabricNode",
                  "autoUpgradeMinorVersion": false,
                  "protectedSettings": {
                    "StorageAccountKey1": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('vmLogStorageAccountName')),'2015-06-15').key1]",
                    "StorageAccountKey2": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('vmLogStorageAccountName')),'2015-06-15').key2]"
                  },
                  "publisher": "Microsoft.Azure.ServiceFabric",
                  "settings": {
                    "clusterEndpoint": "[reference(parameters('clusterName')).clusterEndpoint]",
                    "nodeTypeRef": "[variables('backEndNodes')['TypeName']]",
                    "dataPath": "D:\\\\SvcFab",
                    "durabilityLevel": "[parameters('vmssDurabilityLevel')]",
                    "certificate": {
                      "thumbprint": "[parameters('certificateThumbprint')]",
                      "x509StoreName": "[parameters('certificateStoreValue')]"
                    }
                  },
                  "typeHandlerVersion": "1.0"
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('backEndNodes')['nicName']]",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "[concat(variables('backEndNodes')['nicName'],'-',0)]",
                      "properties": {
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[variables('backEndLoadBalancer')['PoolID']]"
                          }
                        ],
                        "subnet": {
                          "id": "[variables('backEndSubnet')['Ref']]"
                        }
                      }
                    }
                  ],
                  "primary": true
                }
              }
            ]
          },
          "osProfile": {
            "adminPassword": "[parameters('adminPassword')]",
            "adminUsername": "[parameters('adminUserName')]",
            "computerNamePrefix": "[variables('backEndNodes')['TypeName']]",
            "secrets": [
              {
                "sourceVault": {
                  "id": "[parameters('sourceVaultValue')]"
                },
                "vaultCertificates": [
                  {
                    "certificateStore": "[parameters('certificateStoreValue')]",
                    "certificateUrl": "[parameters('certificateUrlValue')]"
                  }
                ]
              }
            ]
          },
          "storageProfile": {
            "imageReference": "[variables('vmImageReference')]",
            "osDisk": {
              "vhdContainers": [
                "[concat('https://', variables('storageAccountNameArray')[0], variables('storageAccountSuffix'), '.blob.core.windows.net/', variables('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('storageAccountNameArray')[1], variables('storageAccountSuffix'), '.blob.core.windows.net/', variables('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('storageAccountNameArray')[2], variables('storageAccountSuffix'), '.blob.core.windows.net/', variables('vmStorageAccountContainerName'))]"
              ],
              "name": "vmssosdisk",
              "caching": "ReadOnly",
              "createOption": "FromImage"
            }
          }
        }
      },
      "sku": {
        "name": "[variables('backEndNodes')['TypeSize']]",
        "capacity": "[variables('backEndNodes')['Capacity']]",
        "tier": "Standard"
      },
      "tags": {
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "comments": "VM Scale Set for management nodes",
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[variables('managementNodes')['TypeName']]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameArray')[0], variables('storageAccountSuffix'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameArray')[1], variables('storageAccountSuffix'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountNameArray')[2], variables('storageAccountSuffix'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('vmLogStorageAccountName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('managementLoadBalancer')['Name'])]"
      ],
      "properties": {
        "overprovision": "[variables('vmssOverProvision')]",
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "extensionProfile": {
            "extensions": [
              {
                "name": "[concat('ServiceFabricNodeVmExt',variables('managementNodes')['TypeName'])]",
                "properties": {
                  "type": "ServiceFabricNode",
                  "autoUpgradeMinorVersion": false,
                  "protectedSettings": {
                    "StorageAccountKey1": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('vmLogStorageAccountName')),'2015-06-15').key1]",
                    "StorageAccountKey2": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('vmLogStorageAccountName')),'2015-06-15').key2]"
                  },
                  "publisher": "Microsoft.Azure.ServiceFabric",
                  "settings": {
                    "clusterEndpoint": "[reference(parameters('clusterName')).clusterEndpoint]",
                    "nodeTypeRef": "[variables('managementNodes')['TypeName']]",
                    "dataPath": "D:\\\\SvcFab",
                    "durabilityLevel": "[parameters('vmssDurabilityLevel')]",
                    "certificate": {
                      "thumbprint": "[parameters('certificateThumbprint')]",
                      "x509StoreName": "[parameters('certificateStoreValue')]"
                    }
                  },
                  "typeHandlerVersion": "1.0"
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('managementNodes')['nicName']]",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "[concat(variables('managementNodes')['nicName'],'-',0)]",
                      "properties": {
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[variables('managementLoadBalancer')['PoolID']]"
                          }
                        ],
                        "subnet": {
                          "id": "[variables('managementSubnet')['Ref']]"
                        }
                      }
                    }
                  ],
                  "primary": true
                }
              }
            ]
          },
          "osProfile": {
            "adminPassword": "[parameters('adminPassword')]",
            "adminUsername": "[parameters('adminUserName')]",
            "computerNamePrefix": "[variables('managementNodes')['TypeName']]",
            "secrets": [
              {
                "sourceVault": {
                  "id": "[parameters('sourceVaultValue')]"
                },
                "vaultCertificates": [
                  {
                    "certificateStore": "[parameters('certificateStoreValue')]",
                    "certificateUrl": "[parameters('certificateUrlValue')]"
                  }
                ]
              }
            ]
          },
          "storageProfile": {
            "imageReference": "[variables('vmImageReference')]",
            "osDisk": {
              "vhdContainers": [
                "[concat('https://', variables('storageAccountNameArray')[0], variables('storageAccountSuffix'), '.blob.core.windows.net/', variables('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('storageAccountNameArray')[1], variables('storageAccountSuffix'), '.blob.core.windows.net/', variables('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('storageAccountNameArray')[2], variables('storageAccountSuffix'), '.blob.core.windows.net/', variables('vmStorageAccountContainerName'))]"
              ],
              "name": "vmssosdisk",
              "caching": "ReadOnly",
              "createOption": "FromImage"
            }
          }
        }
      },
      "sku": {
        "name": "[variables('managementNodes')['TypeSize']]",
        "capacity": "[variables('managementNodes')['Capacity']]",
        "tier": "Standard"
      },
      "tags": {
        "clusterName": "[parameters('clusterName')]"
      }
    },

    /* Service Fabric Cluster Resources */
    {
      "apiVersion": "2016-03-01",
      "type": "Microsoft.ServiceFabric/clusters",
      "name": "[parameters('clusterName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('applicationDiagnosticsStorageAccountName'))]"
      ],
      "properties": {
        "clientCertificateCommonNames": [],
        "clientCertificateThumbprints": [],
        "httpApplicationGatewayCertificate": {
          "thumbprint": "[parameters('certificateThumbprint')]",
          "x509StoreName": "[parameters('certificateStoreValue')]"
        },
        "clusterState": "Default",
        "diagnosticsStorageAccountConfig": {
          "blobEndpoint": "[concat('https://',variables('applicationDiagnosticsStorageAccountName'),'.blob.core.windows.net/')]",
          "protectedAccountKeyName": "StorageAccountKey1",
          "queueEndpoint": "[concat('https://',variables('applicationDiagnosticsStorageAccountName'),'.queue.core.windows.net/')]",
          "storageAccountName": "[variables('applicationDiagnosticsStorageAccountName')]",
          "tableEndpoint": "[concat('https://',variables('applicationDiagnosticsStorageAccountName'),'.table.core.windows.net/')]"
        },
        "fabricSettings": [],
        "managementEndpoint": "[concat('http://',variables('managementLoadBalancer')['lbIPAddress'],':',variables('serviceFabricPorts')['httpGatewayPort'])]",
        "nodeTypes": [
          {
            "name": "[variables('frontEndNodes')['TypeName']]",
            "applicationPorts": {
              "endPort": "[variables('serviceFabricPorts')['applicationEndPort']]",
              "startPort": "[variables('serviceFabricPorts')['applicationStartPort']]"
            },
            "clientConnectionEndpointPort": "[variables('serviceFabricPorts')['tcpGatewayPort']]",
            "durabilityLevel": "[parameters('clusterDurabilityLevel')]",
            "ephemeralPorts": {
              "endPort": "[variables('serviceFabricPorts')['ephemeralEndPort']]",
              "startPort": "[variables('serviceFabricPorts')['ephemeralStartPort']]"
            },
            "httpGatewayEndpointPort": "[variables('serviceFabricPorts')['httpGatewayPort']]",
            "httpApplicationGatewayEndpointPort": "[parameters('svcFabReverseProxyPort')]",
            "isPrimary": false,
            "comments": "customize the placement properties for this node type",
            "placementProperties": {
              "isDMZ": "true"
            },
            "vmInstanceCount": "[variables('frontEndNodes')['capacity']]"
          },
          {
            "name": "[variables('backEndNodes')['TypeName']]",
            "applicationPorts": {
              "endPort": "[variables('serviceFabricPorts')['applicationEndPort']]",
              "startPort": "[variables('serviceFabricPorts')['applicationStartPort']]"
            },
            "clientConnectionEndpointPort": "[variables('serviceFabricPorts')['tcpGatewayPort']]",
            "durabilityLevel": "[parameters('clusterDurabilityLevel')]",
            "ephemeralPorts": {
              "endPort": "[variables('serviceFabricPorts')['ephemeralEndPort']]",
              "startPort": "[variables('serviceFabricPorts')['ephemeralStartPort']]"
            },
            "httpGatewayEndpointPort": "[variables('serviceFabricPorts')['httpGatewayPort']]",
            "httpApplicationGatewayEndpointPort": "[parameters('svcFabReverseProxyPort')]",
            "isPrimary": false,
            "placementProperties": {
              "isDMZ": "false"
            },
            "vmInstanceCount": "[variables('backEndNodes')['capacity']]"
          },
          {
            "name": "[variables('managementNodes')['TypeName']]",
            "applicationPorts": {
              "endPort": "[variables('serviceFabricPorts')['applicationEndPort']]",
              "startPort": "[variables('serviceFabricPorts')['applicationStartPort']]"
            },
            "clientConnectionEndpointPort": "[variables('serviceFabricPorts')['tcpGatewayPort']]",
            "durabilityLevel": "[parameters('clusterDurabilityLevel')]",
            "ephemeralPorts": {
              "endPort": "[variables('serviceFabricPorts')['ephemeralEndPort']]",
              "startPort": "[variables('serviceFabricPorts')['ephemeralStartPort']]"
            },
            "httpGatewayEndpointPort": "[variables('serviceFabricPorts')['httpGatewayPort']]",
            "httpApplicationGatewayEndpointPort": "[parameters('svcFabReverseProxyPort')]",
            "isPrimary": true,
            "placementProperties": {
              "isDMZ": "false"
            },
            "vmInstanceCount": "[variables('managementNodes')['capacity']]"
          }
        ],
        "provisioningState": "Default",
        "reliabilityLevel": "[parameters('clusterReliabilityLevel')]",
        "vmImage": "Windows"
      },
      "tags": {
        "clusterName": "[parameters('clusterName')]"
      }
    }
  ],
  "outputs": {
    "clusterProperties": {
      "value": "[reference(parameters('clusterName'))]",
      "type": "object"
    }
  }
}
